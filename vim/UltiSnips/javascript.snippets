snippet cl "console.log"
console.log(${1:'here'})$0
endsnippet

snippet vl "console.log('var', var)"
console.log('$1', $1)$0
endsnippet

snippet scl "spaced console.log"
console.log('***********************************************************************\\n\\n\\n');
console.log($0)
console.log('\\n\\n\\n***********************************************************************');
endsnippet

snippet dbgr "Debugger"
debugger // eslint-disable-line
endsnippet

snippet imp "import x from 'x'"
import ${2:*} from '$1'$3
endsnippet

snippet eslnl "eslint disable line"
// eslint-disable-next-line $1
endsnippet

snippet esll "eslint disable line"
// eslint-disable-line $1
endsnippet

snippet ctor "constructor"
constructor(...args) {
  super(...args)
  $0
}
endsnippet

snippet try "try/catch"
try {
  $1
} catch (error) {
  $0
}
endsnippet

snippet afun "async function"
async function $1($2) {
  $0
}
endsnippet

snippet tl "throw log"
throw new Error(JSON.stringify({$0}, null, 2))
endsnippet

snippet switch "Switch Statement"
switch (${1:key}) {
  case ${2:value}: {
    $0
    break
  }
  default: {
    break
  }
}
endsnippet

snippet reducer "Reducer"
const ${1:someReducer} = (state, action) => {
  switch (action.type) {
    case ${2:'value'}: {
      return $0
    }
    default: {
      throw new Error(\`Unhandled action type: ${action.type}\`)
    }
  }
}
endsnippet

snippet case "Switch case"
case ${1:value}: {
  return $0
}
endsnippet

snippet us "React.useState"
const [${1:state}, ${2:setState}] = React.useState($0)
endsnippet

snippet uf "React.useEffect"
React.useEffect(() => {
  $0
}, [$1])
endsnippet

snippet ur "React.useReducer"
const [state, dispatch] = React.useReducer(${1:someReducer}, {
  $0
})
endsnippet

snippet urf "React.useRef"
const ${1:someRef} = React.useRef($0)
endsnippet

snippet rc "React Component"
class $1 extends React.Component {
  render() {
    $0
  }
}
endsnippet
